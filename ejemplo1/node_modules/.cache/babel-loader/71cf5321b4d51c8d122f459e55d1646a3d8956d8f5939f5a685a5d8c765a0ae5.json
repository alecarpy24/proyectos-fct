{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\ejemplo1\\\\src\\\\ejemplo-3\\\\ejemplo-3.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\n// Componente principal del juego\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Juego extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"juego\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tablero\",\n        children: /*#__PURE__*/_jsxDEV(Tablero, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n// Componente Cuadrado: representa una casilla del tablero\nfunction Cuadrado(props) {\n  return (\n    /*#__PURE__*/\n    // Cada cuadrado es un botón. Muestra su valor (X, O o vacío) y llama a la función onClick cuando se hace clic\n    _jsxDEV(\"button\", {\n      className: \"cuadrado\",\n      onClick: props.onClick,\n      children: props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n// Componente Tablero: contiene el estado del juego y gestiona la interacción\n_c = Cuadrado;\nclass Tablero extends React.Component {\n  constructor(props) {\n    super(props);\n    // Estado del componente Tablero: almacena las casillas (cuadrados) y el turno del siguiente jugador\n    this.state = {\n      cuadrados: Array(9).fill(null),\n      // Inicializa un array de 9 elementos con valor null (el tablero vacío)\n      siguiente: true // Controla de quién es el turno; true es el jugador \"X\" y false es \"O\"\n    };\n  }\n\n  // Método que se ejecuta cuando un jugador hace clic en una casilla\n  handleClick(i) {\n    // Crea una copia del array de cuadrados para no modificar el estado directamente\n    const cuadrados = this.state.cuadrados.slice();\n\n    // Si ya hay un ganador o la casilla ya está ocupada, no se hace nada\n    if (conocerGanador(cuadrados) || cuadrados[i]) {\n      return;\n    }\n\n    // Asigna \"X\" o \"O\" a la casilla dependiendo del turno\n    cuadrados[i] = this.state.siguiente ? 'X' : 'O';\n\n    // Actualiza el estado del componente con el nuevo tablero y cambia el turno al siguiente jugador\n    this.setState({\n      cuadrados: cuadrados,\n      // Nuevo estado del tablero con la casilla actualizada\n      siguiente: !this.state.siguiente // Alterna el turno (si era X, ahora será O, y viceversa)\n    });\n  }\n\n  // Método para crear un componente Cuadrado en la posición `i` del tablero\n  dibujarCuadrado(i) {\n    return (\n      /*#__PURE__*/\n      // Renderiza el componente Cuadrado con su valor y la acción de clic correspondiente\n      _jsxDEV(Cuadrado, {\n        value: this.state.cuadrados[i],\n        onClick: () => this.handleClick(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    );\n  }\n  render() {\n    // Verifica si hay un ganador llamando a la función conocerGanador\n    const ganador = conocerGanador(this.state.cuadrados);\n\n    // Variable para mostrar el mensaje en pantalla: quién es el ganador o quién es el próximo jugador\n    let info;\n    if (ganador) {\n      // Si hay un ganador, muestra quién ganó\n      info = 'Ganador: ' + ganador;\n    } else {\n      // Si no hay ganador, muestra quién es el siguiente en jugar (X u O)\n      info = 'Siguiente jugador: ' + (this.state.siguiente ? 'Jugador X' : 'Jugador O');\n    }\n\n    // Renderiza el tablero con 3 filas, cada una con 3 cuadrados\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"estado\",\n        children: info\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tablero-fila\",\n        children: [this.dibujarCuadrado(0), this.dibujarCuadrado(1), this.dibujarCuadrado(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tablero-fila\",\n        children: [this.dibujarCuadrado(3), this.dibujarCuadrado(4), this.dibujarCuadrado(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tablero-fila\",\n        children: [this.dibujarCuadrado(6), this.dibujarCuadrado(7), this.dibujarCuadrado(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n// Función que verifica si hay un ganador en el juego\nfunction conocerGanador(cuadrados) {\n  // Combinaciones ganadoras posibles (filas, columnas, diagonales)\n  const lineas = [[0, 1, 2],\n  // Fila superior\n  [3, 4, 5],\n  // Fila central\n  [6, 7, 8],\n  // Fila inferior\n  [0, 3, 6],\n  // Columna izquierda\n  [1, 4, 7],\n  // Columna central\n  [2, 5, 8],\n  // Columna derecha\n  [0, 4, 8],\n  // Diagonal principal\n  [2, 4, 6] // Diagonal secundaria\n  ];\n\n  // Recorre todas las combinaciones posibles para ver si alguna coincide\n  for (let i = 0; i < lineas.length; i++) {\n    const [a, b, c] = lineas[i]; // Obtiene los tres índices de una combinación ganadora\n    // Verifica si en esas posiciones hay \"X\" o \"O\" iguales (es decir, si alguien ha ganado)\n    if (cuadrados[a] && cuadrados[a] === cuadrados[b] && cuadrados[a] === cuadrados[c]) {\n      return cuadrados[a]; // Si hay un ganador, devuelve \"X\" o \"O\"\n    }\n  }\n\n  // Si no hay ganador, devuelve null\n  return null;\n}\n\n// Exporta el componente principal del juego para usarlo en la aplicación\nexport default Juego;\nvar _c;\n$RefreshReg$(_c, \"Cuadrado\");","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","Juego","Component","render","className","children","Tablero","fileName","_jsxFileName","lineNumber","columnNumber","Cuadrado","props","onClick","value","_c","constructor","state","cuadrados","Array","fill","siguiente","handleClick","i","slice","conocerGanador","setState","dibujarCuadrado","ganador","info","lineas","length","a","b","c","$RefreshReg$"],"sources":["C:/React/ejemplo1/src/ejemplo-3/ejemplo-3.jsx"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\n\r\n// Componente principal del juego\r\nclass Juego extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"juego\">\r\n                <div className=\"tablero\">\r\n                    {/* Renderiza el componente Tablero que contiene la lógica del juego */}\r\n                    <Tablero />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Componente Cuadrado: representa una casilla del tablero\r\nfunction Cuadrado(props) {\r\n    return (\r\n        // Cada cuadrado es un botón. Muestra su valor (X, O o vacío) y llama a la función onClick cuando se hace clic\r\n        <button className='cuadrado' onClick={props.onClick}>{props.value}</button>\r\n    )\r\n}\r\n\r\n// Componente Tablero: contiene el estado del juego y gestiona la interacción\r\nclass Tablero extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Estado del componente Tablero: almacena las casillas (cuadrados) y el turno del siguiente jugador\r\n        this.state = {\r\n            cuadrados: Array(9).fill(null),  // Inicializa un array de 9 elementos con valor null (el tablero vacío)\r\n            siguiente: true,  // Controla de quién es el turno; true es el jugador \"X\" y false es \"O\"\r\n        };\r\n    }\r\n    \r\n    // Método que se ejecuta cuando un jugador hace clic en una casilla\r\n    handleClick(i) {\r\n        // Crea una copia del array de cuadrados para no modificar el estado directamente\r\n        const cuadrados = this.state.cuadrados.slice();\r\n\r\n        // Si ya hay un ganador o la casilla ya está ocupada, no se hace nada\r\n        if (conocerGanador(cuadrados) || cuadrados[i]) {\r\n            return;\r\n        }\r\n\r\n        // Asigna \"X\" o \"O\" a la casilla dependiendo del turno\r\n        cuadrados[i] = this.state.siguiente ? 'X' : 'O';\r\n\r\n        // Actualiza el estado del componente con el nuevo tablero y cambia el turno al siguiente jugador\r\n        this.setState({\r\n            cuadrados: cuadrados,  // Nuevo estado del tablero con la casilla actualizada\r\n            siguiente: !this.state.siguiente,  // Alterna el turno (si era X, ahora será O, y viceversa)\r\n        });\r\n    }\r\n\r\n    // Método para crear un componente Cuadrado en la posición `i` del tablero\r\n    dibujarCuadrado(i) {\r\n        return (\r\n            // Renderiza el componente Cuadrado con su valor y la acción de clic correspondiente\r\n            <Cuadrado value={this.state.cuadrados[i]} onClick={() => this.handleClick(i)} />\r\n        )\r\n    }\r\n\r\n    render() {\r\n        // Verifica si hay un ganador llamando a la función conocerGanador\r\n        const ganador = conocerGanador(this.state.cuadrados);\r\n\r\n        // Variable para mostrar el mensaje en pantalla: quién es el ganador o quién es el próximo jugador\r\n        let info;\r\n        if (ganador) {\r\n            // Si hay un ganador, muestra quién ganó\r\n            info = 'Ganador: ' + ganador;\r\n        } else {\r\n            // Si no hay ganador, muestra quién es el siguiente en jugar (X u O)\r\n            info = 'Siguiente jugador: ' + (this.state.siguiente ? 'Jugador X' : 'Jugador O');\r\n        }\r\n\r\n        // Renderiza el tablero con 3 filas, cada una con 3 cuadrados\r\n        return (\r\n            <div>\r\n                {/* Muestra la información de quién juega o si hay un ganador */}\r\n                <div className=\"estado\">{info}</div>\r\n\r\n                {/* Primera fila del tablero */}\r\n                <div className=\"tablero-fila\">\r\n                    {this.dibujarCuadrado(0)}{this.dibujarCuadrado(1)}{this.dibujarCuadrado(2)}\r\n                </div>\r\n\r\n                {/* Segunda fila del tablero */}\r\n                <div className=\"tablero-fila\">\r\n                    {this.dibujarCuadrado(3)}{this.dibujarCuadrado(4)}{this.dibujarCuadrado(5)}\r\n                </div>\r\n\r\n                {/* Tercera fila del tablero */}\r\n                <div className=\"tablero-fila\">\r\n                    {this.dibujarCuadrado(6)}{this.dibujarCuadrado(7)}{this.dibujarCuadrado(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Función que verifica si hay un ganador en el juego\r\nfunction conocerGanador(cuadrados) {\r\n    // Combinaciones ganadoras posibles (filas, columnas, diagonales)\r\n    const lineas = [\r\n        [0, 1, 2], // Fila superior\r\n        [3, 4, 5], // Fila central\r\n        [6, 7, 8], // Fila inferior\r\n        [0, 3, 6], // Columna izquierda\r\n        [1, 4, 7], // Columna central\r\n        [2, 5, 8], // Columna derecha\r\n        [0, 4, 8], // Diagonal principal\r\n        [2, 4, 6], // Diagonal secundaria\r\n    ];\r\n\r\n    // Recorre todas las combinaciones posibles para ver si alguna coincide\r\n    for (let i = 0; i < lineas.length; i++) {\r\n        const [a, b, c] = lineas[i];  // Obtiene los tres índices de una combinación ganadora\r\n        // Verifica si en esas posiciones hay \"X\" o \"O\" iguales (es decir, si alguien ha ganado)\r\n        if (cuadrados[a] && cuadrados[a] === cuadrados[b] && cuadrados[a] === cuadrados[c]) {\r\n            return cuadrados[a];  // Si hay un ganador, devuelve \"X\" o \"O\"\r\n        }\r\n    }\r\n\r\n    // Si no hay ganador, devuelve null\r\n    return null;\r\n}\r\n\r\n// Exporta el componente principal del juego para usarlo en la aplicación\r\nexport default Juego;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}